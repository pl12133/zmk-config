/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LOWER 1
#define NUM 2
#define FUNC 3
#define RAISE 4 // RAISE currently unused

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  -   |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |ALT/X|  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB       &kp Q         &kp W         &kp E         &kp R         &kp T         &kp Y         &kp U         &kp I         &kp O         &kp P         &kp MINUS     
   &kp LCTRL     &kp A         &kp S         &kp D         &kp F         &kp G         &kp H         &kp J         &kp K         &kp L         &kp SEMI      &kp SQT       
   &kp LSHFT     &kp Z         &mt LALT X    &kp C         &kp V         &kp B         &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &kp RSHFT     
                                             &kp LGUI      &lt LOWER ESC &kp SPACE     &kp RET       &mo NUM       &kp BSPC      
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |LG+GRV|  1  |VIM_W|  3  |VIM_$|  5  |   |  6  |  7  |  8  |  9  |VIM_0|      |
// |      |     |     |     |     |     |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |VIM_B|   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp LG(GRAVE) &kp N1    &kp LA(RIGHT) &kp N3     &kp LG(RIGHT) &kp N5        &kp N6       &kp N7     &kp N8       &kp N9       &kp LG(LEFT) &trans
   &trans        &trans    &trans        &trans     &trans        &trans        &kp LEFT     &kp DOWN   &kp UP       &kp RIGHT    &trans       &trans
   &kp LSHFT     &trans    &trans        &trans     &trans        &kp LA(LEFT)  &trans       &trans     &trans       &trans       &trans       &trans
                                         &kp LGUI   &trans        &kp SPACE     &kp RET      &trans     &trans
                        >;
                };

                num_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  [  |  7  |  8  |  9  |  ]  |||||     |     |     |     |     |      |
// | CTRL |  ;  |  4  |  5  |  6  |  =  ||||| LFT | DWN |  UP | RGT |     |      |
// | SHFT |  `  |  1  |  2  |  3  |  \  |||||     |     |     | DEL |  \  |      |
//                    |  (  |  0  |  -  ||||| ENT |     |     |
                        bindings = <
   &kp TAB    &kp LBKT  &kp N7    &kp N8      &kp N9    &kp RBKT   /**/    &trans        &trans     &trans    &trans     &trans    &trans
   &trans     &kp SEMI  &kp N4    &kp N5      &kp N6    &kp EQUAL  /**/    &kp LEFT      &kp DOWN   &kp UP    &kp RIGHT  &trans    &trans
   &kp LSHFT  &kp GRAVE &kp N1    &kp N2      &kp N3    &kp BSLH   /**/    &trans        &trans     &trans    &kp DEL    &kp BSLH  &trans
                                  &kp LPAR    &kp N0    &trans     /**/    &kp RET       &trans     &trans
                        >;
                };

                func_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   | PREV|PAUSE| NEXT| MUTE|VOLDN| VOLUP|
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans       &trans       &trans        &trans        &trans        &trans        &kp C_PREV   &kp C_PP   &kp C_NEXT &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP
   &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT  &trans       &trans
   &kp LSHFT    &kp LC(LA(LG(LEFT)))       &kp LC(LA(LG(RIGHT)))        &trans        &trans        &trans        &trans       &trans     &trans     &trans     &trans       &trans
                                           &kp LGUI      &trans        &kp SPACE     &kp RET      &trans     &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &trans
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &trans
                        >;
                };

        };
};

// Vimscript to try autoformatting lines
// s/\(&\)\([^&]\+\) \+\([^&]\+\)\? */\=submatch(1) . submatch(2) . ' ' . submatch(3) . repeat(' ', 13 - (strlen(submatch(1)) + strlen(submatch(2)) + strlen(submatch(3))))/gc
